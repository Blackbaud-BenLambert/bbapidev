{
  "Name": "DocumentationSamplesCsharp",
  "DisplayName": "Code samples: C#",
  "Description": "",
  "Published": null,
  "Draft": "using System;\r\nusing System.Net.Http.Headers;\r\nusing System.Text;\r\nusing System.Net.Http;\r\nusing System.Web;\r\n\r\nnamespace CSHttpClientSample\r\n{\r\n    static class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            MakeRequest();\r\n            Console.WriteLine(\"Hit ENTER to exit...\");\r\n            Console.ReadLine();\r\n        }\r\n        \r\n        static async void MakeRequest()\r\n        {\r\n            var client = new HttpClient();\r\n            var queryString = HttpUtility.ParseQueryString(string.Empty);\r\n\r\n{% if headers.size > 0 -%}\r\n            // Request headers\r\n{% for header in headers -%}\r\n{% case header.Name -%}\r\n{% when \"Accept\"%}\r\n            client.DefaultRequestHeaders.Accept.Add(MediaTypeWithQualityHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Accept-Charset\" -%}\r\n            client.DefaultRequestHeaders.AcceptCharset.Add(StringWithQualityHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Accept-Encoding\" -%}\r\n            client.DefaultRequestHeaders.AcceptEncoding.Add(StringWithQualityHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Accept-Language\" -%}\r\n            client.DefaultRequestHeaders.AcceptLanguage.Add(StringWithQualityHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Cache-Control\" -%}\r\n            client.DefaultRequestHeaders.CacheControl = CacheControlHeaderValue.Parse(\"{{header.value}}\");\r\n{% when \"Connection\" -%}\r\n            client.DefaultRequestHeaders.Connection.Add(\"{{header.value}}\");\r\n{% when \"Date\" -%}\r\n            client.DefaultRequestHeaders.Date = DateTimeOffset.Parse(\"{{header.value}}\");\r\n{% when \"Expect\" -%}\r\n            client.DefaultRequestHeaders.Expect.Add(NameValueWithParametersHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"If-Match\" -%}\r\n            client.DefaultRequestHeaders.IfMatch.Add(EntityTagHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"If-Modified-Since\" -%}\r\n            client.DefaultRequestHeaders.IfModifiedSince = DateTimeOffset.Parse(\"{{header.value}}\");\r\n{% when \"If-None-Match\" -%}\r\n            client.DefaultRequestHeaders.IfNoneMatch.Add(EntityTagHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"If-Range\" -%}\r\n            client.DefaultRequestHeaders.IfRange = RangeConditionHeaderValue.Parse(\"{{header.value}}\");\r\n{% when \"If-Unmodified-Since\" -%}\r\n            client.DefaultRequestHeaders.IfUnmodifiedSince = DateTimeOffset.Parse(\"{{header.value}}\");\r\n{% when \"Max-Forwards\" -%}\r\n            client.DefaultRequestHeaders.MaxForwards = int.Parse(\"{{header.value}}\");\r\n{% when \"Pragma\" -%}\r\n            client.DefaultRequestHeaders.Pragma.Add(NameValueHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Range\" -%}\r\n            client.DefaultRequestHeaders.Range = RangeHeaderValue.Parse(\"{{header.value}}\");\r\n{% when \"Referer\" -%}\r\n            client.DefaultRequestHeaders.Referrer = new Uri(\"{{header.value}}\");\r\n{% when \"TE\" -%}\r\n            client.DefaultRequestHeaders.TE.Add(TransferCodingWithQualityHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Transfer-Encoding\" -%}\r\n            client.DefaultRequestHeaders.TransferEncoding.Add(TransferCodingHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Upgrade\" -%}\r\n            client.DefaultRequestHeaders.Upgrade.Add(ProductHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"User-Agent\" -%}\r\n            client.DefaultRequestHeaders.UserAgent.Add(ProductInfoHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Via\" -%}              \r\n            client.DefaultRequestHeaders.Via.Add(ViaHeaderValue.Parse(\"{{header.value}}\"));\r\n{% when \"Warning\" -%}\r\n            client.DefaultRequestHeaders.Warning.Add(WarningHeaderValue.Parse(\"{{header.value}}\"));\r\n{% else -%}\r\n            client.DefaultRequestHeaders.Add(\"{{header.Name}}\", \"{{header.value}}\");\r\n{% endcase -%}\r\n{% endfor -%}\r\n{% endif -%}\r\n\r\n{% if parameters.size > 0 -%}\r\n            // Request parameters\r\n{% for parameter in parameters -%}\r\n            queryString[\"{{parameter.Name}}\"] = \"{{parameter.Value}}\";\r\n{% endfor -%}\r\n{% endif -%}\r\n            var uri = \"{{scheme}}://{{host}}{{path}}{% if path contains '?' %}&{% else %}?{% endif %}\" + queryString;\r\n\r\n{% case method -%}\r\n\r\n{% when \"POST\" -%}\r\n            HttpResponseMessage response;\r\n\r\n            // Request body\r\n            byte[] byteData = Encoding.UTF8.GetBytes(\"{{ body | replace:'\"','\\\"'}}\");\r\n\r\n            using (var content = new ByteArrayContent(byteData))\r\n            {\r\n{% if body -%}\r\n               content.Headers.ContentType = new MediaTypeHeaderValue(\"< your content type, i.e. application/json >\");\r\n{% endif -%}\r\n               response = await client.PostAsync(uri, content);\r\n            }\r\n\r\n{% when \"GET\" -%}\r\n            var response = await client.GetAsync(uri);\r\n{% when \"DELETE\" -%}\r\n            var response = await client.DeleteAsync(uri);\r\n{% when \"PUT\" -%}\r\n            HttpResponseMessage response;\r\n\r\n            // Request body\r\n            byte[] byteData = Encoding.UTF8.GetBytes(\"{{ body | replace:'\"','\\\"'}}\");\r\n\r\n            using (var content = new ByteArrayContent(byteData))\r\n            {\r\n{% if body -%}\r\n                content.Headers.ContentType = new MediaTypeHeaderValue(\"< your content type, i.e. application/json >\");\r\n{% endif -%}\r\n                response = await client.PutAsync(uri, content);\r\n            }\r\n{% when \"HEAD\" -%}\r\n            var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Head, uri));\r\n{% when \"OPTIONS\" -%}\r\n            var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Options, uri));\r\n{% when \"TRACE\" -%}\r\n            var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Trace, uri));\r\n\r\n            if (response.Content != null)\r\n            {\r\n                var responseString = await response.Content.ReadAsStringAsync();\r\n                Console.WriteLine(responseString);    \r\n            }\r\n{% endcase -%}\r\n        }\r\n    }\r\n}\t",
  "$ref-Original": "api-management/portalTemplates/DocumentationSamplesCsharp/template.html"
}